plugins {
    id 'groovy'
    id 'java-library'
    id 'maven'
    id 'maven-publish'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.21.1'
}

group = 'com.cedarsoftware'
description = 'json-command-servlet'
version = '1.9.0'

// Example builds
//gradle clean build
//gradle clean build publishToMavenLocal
//gradle clean build publish upload closeAndReleaseRepository

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

jar {
    enabled = true
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:2.4.17'
    implementation 'com.cedarsoftware:java-util:1.38.0'
    implementation 'com.cedarsoftware:json-io:4.11.1'
    implementation 'org.springframework:spring-context:5.2.2.RELEASE'
    implementation 'org.springframework:spring-web:5.2.2.RELEASE'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.springframework.boot:spring-boot-starter-logging:2.2.2.RELEASE'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    from groovydoc
    archiveClassifier.set('javadoc')
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact sourcesJar
            artifact groovydocJar
            from components.java
        }
    }
}

signing {
    sign configurations.archives
    sign publishing.publications.maven
}

tasks.withType(Sign) {
    onlyIf { !version.endsWith("SNAPSHOT") }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name = 'json-command-servlet'
                packaging = 'jar'
                // optionally artifactId can be defined here
                description = 'Command servlet for routing web requests to Spring beans'
                url = 'https://github.com/jdereg/json-command-servlet'

                scm {
                    connection = 'scm:git:git://github.com/jdereg/json-command-servlet.git'
                    developerConnection = 'scm:git:git@github.com:jdereg/json-command-servlet.git'
                    url = 'https://github.com/jdereg/json-command-servlet'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'jdereg'
                        name = 'John DeRegnaucourt'
                        email = 'jdereg@gmail.com'
                    }
                }
            }
        }
    }
}